#include <kamek.hpp>

#ifndef _WIILINK_TYPES_
#  define _WIILINK_TYPES_

#  define PROD

#define SHA256_DIGEST_SIZE 32

#  ifndef WWFC_DOMAIN

#    ifdef PROD
#      define WWFC_DOMAIN "zplwii.xyz"
#    else
#      define WWFC_DOMAIN "zplwii.xyz" // Points to localhost
#    endif

#  endif

#  define PAYLOAD_BLOCK_SIZE 0x20000

extern "C" u32 WWFC_CUSTOM_REGION; // 0x80005EFC

typedef struct {
    char magic[0xC]; // Always "WWFC/Payload"
    u32 total_size;
    u8 signature[0x100]; // RSA-2048 signature
} __attribute__((packed)) wwfc_payload_header;

typedef struct {
    u32 format_version; // Payload format version
    u32 format_version_compat; // Minimum payload format version that this
                               // payload is compatible with
    char name[0xC]; // Payload name (e.g. "RMCPD00")
    u32 version; // Payload version
    u32 got_start;
    u32 got_end;
    u32 fixup_start;
    u32 fixup_end;
    u32 patch_list_offset;
    u32 patch_list_end;
    u32 entry_point;
    u32 entry_point_no_got;
    u32 reserved[0x18 / 4];
    char build_timestamp[0x20];
} __attribute__((packed)) wwfc_payload_info;

typedef struct {
    wwfc_payload_header header;
    u8 salt[SHA256_DIGEST_SIZE];
    wwfc_payload_info info;
} __attribute__((packed)) wwfc_payload;

typedef enum {
    /**
     * Copy bytes specified in `args` to the destination `address`.
     * @param arg0 Pointer to the data to copy from.
     * @param arg1 Length of the data.
     */
    WWFC_PATCH_TYPE_WRITE = 0,

    /**
     * Write a branch: `address` = b `arg0`;
     * @param arg0 Branch destination address.
     * @param arg1 Not used.
     */
    WWFC_PATCH_TYPE_BRANCH = 1,

    /**
     * Write a branch with a branch back: `address` = b `arg0`; `arg1` = b
     * `address` + 4;
     * @param arg0 Branch destination address.
     * @param arg1 Address to write the branch back.
     */
    WWFC_PATCH_TYPE_BRANCH_HOOK = 2,

    /**
     * Write a branch with link: `address` = bl `arg0`
     * @param arg0 Branch destination address.
     * @param arg1 Not used.
     */
    WWFC_PATCH_TYPE_CALL = 3,

    /**
     * Write a branch using the count register:
     * `address` = \
     * lis `arg1`, `arg0`\@h; \
     * ori `arg1`, `arg1`, `arg0`\@l; \
     * mtctr `arg1`; \
     * bctr;
     * @param arg0 Branch destination address.
     * @param arg1 Temporary register to use for call.
     */
    WWFC_PATCH_TYPE_BRANCH_CTR = 4,

    /**
     * Write a branch with link using the count register:
     * `address` = \
     * lis `arg1`, `arg0`\@h; \
     * ori `arg1`, `arg1`, `arg0`\@l; \
     * mtctr `arg1`; \
     * bctrl;
     * @param arg0 Branch destination address.
     * @param arg1 Temporary register to use for call.
     */
    WWFC_PATCH_TYPE_BRANCH_CTR_LINK = 5,
} wwfc_patch_type;

/**
 * Flags for different patch levels.
 */
typedef enum {

    /**
     * Critical, used for security patches and other things required to connect
     * to the server. This has no value and is always automatically applied.
     */
    WWFC_PATCH_LEVEL_CRITICAL = 0, // 0x00

    /**
     * Patches that fix bugs in the game, such as anti-freeze patches.
     */
    WWFC_PATCH_LEVEL_BUGFIX = 1 << 0, // 0x01

    /**
     * Patches required for parity with clients using a regular WWFC patcher.
     */
    WWFC_PATCH_LEVEL_PARITY = 1 << 1, // 0x02

    /**
     * Additional feature, not required to be compatible with regular clients.
     */
    WWFC_PATCH_LEVEL_FEATURE = 1 << 2, // 0x04

    /**
     * General support patches that may be redundant depending on the patcher.
     * Used in cases like URL patches.
     */
    WWFC_PATCH_LEVEL_SUPPORT = 1 << 3, // 0x08

    /**
     * Flag used to disable the patch if it has been already applied.
     */
    WWFC_PATCH_LEVEL_DISABLED = 1 << 4, // 0x10
} wwfc_patch_level;

typedef struct {
    u8 level; // wwfc_patch_level
    u8 type; // wwfc_patch_type
    u8 reserved[2];
    u32 address;

    union {
        u32 arg0;
        const void* arg0p;
        const u32* arg0p32;
    };

    u32 arg1;
} __attribute__((packed)) wwfc_patch;

#  define WL_ERROR_PAYLOAD_OK 0
#  define WL_ERROR_GECKO -20900
#  define WL_ERROR_PAYLOAD_STAGE0_MISSING_STAGE1 -20901
#  define WL_ERROR_PAYLOAD_STAGE0_HASH_MISMATCH -20902
#  define WL_ERROR_PAYLOAD_STAGE1_ALLOC -20910
#  define WL_ERROR_PAYLOAD_STAGE1_MAKE_REQUEST -20911
#  define WL_ERROR_PAYLOAD_STAGE1_RESPONSE -20912
#  define WL_ERROR_PAYLOAD_STAGE1_HEADER_CHECK -20913
#  define WL_ERROR_PAYLOAD_STAGE1_LENGTH_ERROR -20914
#  define WL_ERROR_PAYLOAD_STAGE1_SALT_MISMATCH -20915
#  define WL_ERROR_PAYLOAD_STAGE1_GAME_ID_MISMATCH -20916
#  define WL_ERROR_PAYLOAD_STAGE1_SIGNATURE_INVALID -20917
#  define WL_ERROR_PAYLOAD_STAGE1_WAITING -20918
#  define WL_ERROR_PAYLOAD_GAME_MISMATCH -20930

#  ifdef PROD

// Production payload key
static const unsigned char PayloadPublicKey[] = {
    0x21, 0x22, 0x3c, 0x57, 0x24, 0x8f, 0x90, 0x99, 0xeb, 0x7d, 0xbd, 0x2d,
    0x56, 0xf2, 0x3e, 0xda, 0x91, 0xef, 0x4d, 0x92, 0x13, 0x33, 0x01, 0x72,
    0xbe, 0xbf, 0xb6, 0x97, 0x15, 0xfe, 0xbd, 0x2c, 0x93, 0x28, 0xdf, 0x88,
    0x0d, 0x23, 0x66, 0x87, 0xd9, 0x5e, 0x99, 0x34, 0xef, 0x0b, 0xc2, 0xff,
    0xa9, 0x8a, 0xd6, 0xc0, 0x3c, 0x83, 0x79, 0xd1, 0xad, 0xe2, 0x4a, 0xf6,
    0x08, 0xc6, 0x6d, 0x61, 0x91, 0x70, 0x11, 0xe4, 0x39, 0x44, 0x55, 0xae,
    0x3b, 0x71, 0x4d, 0xc0, 0x9e, 0x01, 0x78, 0x81, 0x8c, 0x81, 0x7a, 0x6f,
    0x34, 0x93, 0x3e, 0x7d, 0x71, 0x4c, 0x15, 0x0d, 0x9e, 0x69, 0x18, 0xa5,
    0x80, 0x64, 0xd6, 0x95, 0x01, 0xa0, 0x39, 0xa9, 0x57, 0xc8, 0x94, 0xf6,
    0x6a, 0x3d, 0x1b, 0xf5, 0xd3, 0xe1, 0x5e, 0xbb, 0xa7, 0x6d, 0x32, 0x4c,
    0x26, 0xbc, 0xd5, 0x41, 0x82, 0xe5, 0x11, 0xc8, 0x7c, 0xe0, 0xaa, 0xef,
    0xf4, 0xf1, 0x75, 0x11, 0x33, 0x11, 0x4b, 0xe2, 0x46, 0x46, 0x25, 0xa6,
    0xfb, 0x7c, 0xa6, 0xbe, 0xb1, 0x45, 0x23, 0x30, 0x36, 0x5d, 0x07, 0x4d,
    0x31, 0xf6, 0x63, 0x72, 0x5d, 0xa7, 0xd4, 0x82, 0x62, 0x5f, 0xe0, 0x6e,
    0x07, 0x03, 0x82, 0xd3, 0x34, 0x93, 0x57, 0xe7, 0xd9, 0x12, 0x12, 0x7c,
    0xe1, 0x45, 0x59, 0x13, 0xf2, 0xa1, 0xd4, 0x3f, 0xc5, 0x67, 0x8d, 0x22,
    0xc3, 0x4f, 0x0b, 0xde, 0x33, 0xf2, 0xfc, 0xe5, 0x4c, 0xa1, 0xfa, 0x73,
    0x9c, 0x3e, 0x9f, 0x04, 0x7b, 0x25, 0xae, 0x7d, 0x83, 0xc6, 0x56, 0x91,
    0xdf, 0x22, 0xed, 0xaf, 0x41, 0xd3, 0xd9, 0x07, 0x84, 0x4e, 0x48, 0x4b,
    0x8e, 0xd6, 0xec, 0x07, 0x99, 0x27, 0xef, 0x08, 0xca, 0x4b, 0x5c, 0x3a,
    0xcb, 0x19, 0xef, 0x1c, 0xab, 0x7f, 0x5b, 0x42, 0x04, 0x09, 0x9b, 0xc2,
    0xef, 0x30, 0x72, 0x51, 0xc5, 0xc2, 0xeb, 0x79, 0x5e, 0x18, 0x0f, 0x39,
    0x47, 0x3f, 0x27, 0x2f, 0x8d, 0x19, 0xb2, 0xad, 0x4d, 0x26, 0xc5, 0xd6,
    0x23, 0x83, 0xd6, 0x11, 0x95, 0x56, 0xae, 0x08, 0xb1, 0xf9, 0xca, 0x1c,
    0x60, 0x98, 0x4f, 0x43, 0x7c, 0x28, 0xf4, 0x0d, 0xda, 0x58, 0x56, 0x6c,
    0x67, 0xf5, 0x84, 0x50, 0x37, 0x3d, 0x8e, 0x48, 0x5c, 0x91, 0xfa, 0xf9,
    0xeb, 0xeb, 0xed, 0x0b, 0x18, 0x00, 0xeb, 0xf4, 0x96, 0xbd, 0x28, 0x81,
    0x1d, 0xbf, 0x1c, 0x88, 0xb2, 0x18, 0xca, 0xed, 0xa6, 0xe1, 0x06, 0xcd,
    0x49, 0x49, 0x31, 0x25, 0x13, 0x66, 0xeb, 0x12, 0xa2, 0xbb, 0x2b, 0xe8,
    0xe3, 0x7b, 0xc8, 0xba, 0xb5, 0x2c, 0xef, 0x24, 0x89, 0x88, 0x29, 0x72,
    0x25, 0xfb, 0x4a, 0x7d, 0xb1, 0xc9, 0xf0, 0x4b, 0x42, 0x19, 0x89, 0x40,
    0xa5, 0xe9, 0x1a, 0x3a, 0x7c, 0xe7, 0xd2, 0xf4, 0x3b, 0x3f, 0xcb, 0x25,
    0x7f, 0x47, 0x13, 0xe0, 0x42, 0x9e, 0x1b, 0x42, 0x70, 0xde, 0xaf, 0x42,
    0x20, 0xce, 0xe9, 0x07, 0x3a, 0x88, 0xed, 0x77, 0xe6, 0xe6, 0xd1, 0x3e,
    0x3a, 0x9e, 0x70, 0xdb, 0x4a, 0x39, 0xba, 0x81, 0xdb, 0xe2, 0x7b, 0xdc,
    0xb6, 0x52, 0x18, 0x56, 0x7f, 0xd9, 0xb3, 0xe3, 0xc6, 0x22, 0x41, 0x6d,
    0x61, 0x3f, 0x3a, 0xcd, 0x61, 0x19, 0xd3, 0x48, 0x77, 0x5e, 0x29, 0xc6,
    0xe9, 0x8f, 0x82, 0x9e, 0xcd, 0xdf, 0xf9, 0x58, 0x02, 0xcd, 0xfa, 0x8f,
    0xdc, 0x81, 0xe5, 0x1b, 0x17, 0x50, 0x38, 0x8d, 0x1e, 0x92, 0xc6, 0x9d,
    0xb5, 0x55, 0x9c, 0xe0, 0x36, 0x4d, 0x98, 0xac, 0xe5, 0xf0, 0x32, 0x0d,
    0x38, 0x36, 0x02, 0xa6, 0x1e, 0xd5, 0x68, 0x14, 0x2c, 0xab, 0x60, 0x3a,
    0x80, 0x4e, 0x3e, 0x37, 0x84, 0xbb, 0xb9, 0xb8, 0x89, 0x8f, 0xe6, 0x44,
    0x7e, 0x24, 0x01, 0x66, 0x75, 0xb0, 0x90, 0x7e, 0xa4, 0x73, 0xd5, 0xc4,
};

#  else

// Development payload key
static const unsigned char PayloadPublicKey[] = {
    0x21, 0x22, 0x3c, 0x57, 0x24, 0x8f, 0x90, 0x99, 0xeb, 0x7d, 0xbd, 0x2d,
    0x56, 0xf2, 0x3e, 0xda, 0x91, 0xef, 0x4d, 0x92, 0x13, 0x33, 0x01, 0x72,
    0xbe, 0xbf, 0xb6, 0x97, 0x15, 0xfe, 0xbd, 0x2c, 0x93, 0x28, 0xdf, 0x88,
    0x0d, 0x23, 0x66, 0x87, 0xd9, 0x5e, 0x99, 0x34, 0xef, 0x0b, 0xc2, 0xff,
    0xa9, 0x8a, 0xd6, 0xc0, 0x3c, 0x83, 0x79, 0xd1, 0xad, 0xe2, 0x4a, 0xf6,
    0x08, 0xc6, 0x6d, 0x61, 0x91, 0x70, 0x11, 0xe4, 0x39, 0x44, 0x55, 0xae,
    0x3b, 0x71, 0x4d, 0xc0, 0x9e, 0x01, 0x78, 0x81, 0x8c, 0x81, 0x7a, 0x6f,
    0x34, 0x93, 0x3e, 0x7d, 0x71, 0x4c, 0x15, 0x0d, 0x9e, 0x69, 0x18, 0xa5,
    0x80, 0x64, 0xd6, 0x95, 0x01, 0xa0, 0x39, 0xa9, 0x57, 0xc8, 0x94, 0xf6,
    0x6a, 0x3d, 0x1b, 0xf5, 0xd3, 0xe1, 0x5e, 0xbb, 0xa7, 0x6d, 0x32, 0x4c,
    0x26, 0xbc, 0xd5, 0x41, 0x82, 0xe5, 0x11, 0xc8, 0x7c, 0xe0, 0xaa, 0xef,
    0xf4, 0xf1, 0x75, 0x11, 0x33, 0x11, 0x4b, 0xe2, 0x46, 0x46, 0x25, 0xa6,
    0xfb, 0x7c, 0xa6, 0xbe, 0xb1, 0x45, 0x23, 0x30, 0x36, 0x5d, 0x07, 0x4d,
    0x31, 0xf6, 0x63, 0x72, 0x5d, 0xa7, 0xd4, 0x82, 0x62, 0x5f, 0xe0, 0x6e,
    0x07, 0x03, 0x82, 0xd3, 0x34, 0x93, 0x57, 0xe7, 0xd9, 0x12, 0x12, 0x7c,
    0xe1, 0x45, 0x59, 0x13, 0xf2, 0xa1, 0xd4, 0x3f, 0xc5, 0x67, 0x8d, 0x22,
    0xc3, 0x4f, 0x0b, 0xde, 0x33, 0xf2, 0xfc, 0xe5, 0x4c, 0xa1, 0xfa, 0x73,
    0x9c, 0x3e, 0x9f, 0x04, 0x7b, 0x25, 0xae, 0x7d, 0x83, 0xc6, 0x56, 0x91,
    0xdf, 0x22, 0xed, 0xaf, 0x41, 0xd3, 0xd9, 0x07, 0x84, 0x4e, 0x48, 0x4b,
    0x8e, 0xd6, 0xec, 0x07, 0x99, 0x27, 0xef, 0x08, 0xca, 0x4b, 0x5c, 0x3a,
    0xcb, 0x19, 0xef, 0x1c, 0xab, 0x7f, 0x5b, 0x42, 0x04, 0x09, 0x9b, 0xc2,
    0xef, 0x30, 0x72, 0x51, 0xc5, 0xc2, 0xeb, 0x79, 0x5e, 0x18, 0x0f, 0x39,
    0x47, 0x3f, 0x27, 0x2f, 0x8d, 0x19, 0xb2, 0xad, 0x4d, 0x26, 0xc5, 0xd6,
    0x23, 0x83, 0xd6, 0x11, 0x95, 0x56, 0xae, 0x08, 0xb1, 0xf9, 0xca, 0x1c,
    0x60, 0x98, 0x4f, 0x43, 0x7c, 0x28, 0xf4, 0x0d, 0xda, 0x58, 0x56, 0x6c,
    0x67, 0xf5, 0x84, 0x50, 0x37, 0x3d, 0x8e, 0x48, 0x5c, 0x91, 0xfa, 0xf9,
    0xeb, 0xeb, 0xed, 0x0b, 0x18, 0x00, 0xeb, 0xf4, 0x96, 0xbd, 0x28, 0x81,
    0x1d, 0xbf, 0x1c, 0x88, 0xb2, 0x18, 0xca, 0xed, 0xa6, 0xe1, 0x06, 0xcd,
    0x49, 0x49, 0x31, 0x25, 0x13, 0x66, 0xeb, 0x12, 0xa2, 0xbb, 0x2b, 0xe8,
    0xe3, 0x7b, 0xc8, 0xba, 0xb5, 0x2c, 0xef, 0x24, 0x89, 0x88, 0x29, 0x72,
    0x25, 0xfb, 0x4a, 0x7d, 0xb1, 0xc9, 0xf0, 0x4b, 0x42, 0x19, 0x89, 0x40,
    0xa5, 0xe9, 0x1a, 0x3a, 0x7c, 0xe7, 0xd2, 0xf4, 0x3b, 0x3f, 0xcb, 0x25,
    0x7f, 0x47, 0x13, 0xe0, 0x42, 0x9e, 0x1b, 0x42, 0x70, 0xde, 0xaf, 0x42,
    0x20, 0xce, 0xe9, 0x07, 0x3a, 0x88, 0xed, 0x77, 0xe6, 0xe6, 0xd1, 0x3e,
    0x3a, 0x9e, 0x70, 0xdb, 0x4a, 0x39, 0xba, 0x81, 0xdb, 0xe2, 0x7b, 0xdc,
    0xb6, 0x52, 0x18, 0x56, 0x7f, 0xd9, 0xb3, 0xe3, 0xc6, 0x22, 0x41, 0x6d,
    0x61, 0x3f, 0x3a, 0xcd, 0x61, 0x19, 0xd3, 0x48, 0x77, 0x5e, 0x29, 0xc6,
    0xe9, 0x8f, 0x82, 0x9e, 0xcd, 0xdf, 0xf9, 0x58, 0x02, 0xcd, 0xfa, 0x8f,
    0xdc, 0x81, 0xe5, 0x1b, 0x17, 0x50, 0x38, 0x8d, 0x1e, 0x92, 0xc6, 0x9d,
    0xb5, 0x55, 0x9c, 0xe0, 0x36, 0x4d, 0x98, 0xac, 0xe5, 0xf0, 0x32, 0x0d,
    0x38, 0x36, 0x02, 0xa6, 0x1e, 0xd5, 0x68, 0x14, 0x2c, 0xab, 0x60, 0x3a,
    0x80, 0x4e, 0x3e, 0x37, 0x84, 0xbb, 0xb9, 0xb8, 0x89, 0x8f, 0xe6, 0x44,
    0x7e, 0x24, 0x01, 0x66, 0x75, 0xb0, 0x90, 0x7e, 0xa4, 0x73, 0xd5, 0xc4,
};

#  endif

#endif